<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.bds.easy.delayed.mapper.DelayedMapper">
    <resultMap id="BaseResultMap" type="com.bds.easy.delayed.core.Delayed">
        <id column="id" property="id"/>
        <result column="status" property="status"/>
        <result column="group" property="group"/>
        <result column="code" property="code"/>
        <result column="date" property="date"/>
        <result column="job_class" property="jobClass" typeHandler="com.bds.easy.delayed.type.handler.ClassTypeHandler"/>
        <result column="name" property="name"/>
        <result column="description" property="description"/>
        <result column="param" property="param"/>
    </resultMap>
    <select id="queryDelayedEarliestTrigger" resultMap="BaseResultMap">
        select
        id,
        status,
        `group`,
        code,
        date,
        job_class,
        name,
        description,
        param
        from delayed_job
        <where>
            status in ('wait','processing')
            and
            date &gt; CURRENT_TIMESTAMP
        </where>
        order by date asc
        limit 0, ${size}
    </select>

    <update id="resetDelayed">
        update delayed_job
        set status = 'wait'
        <where>
            status = 'processing'
            <foreach collection="ids" item="id" separator="," open="and id in(" close=")">
                #{id}
            </foreach>
        </where>
    </update>

    <update id="updateStatus">
        update delayed_job
        set status = #{status}
        <where>
            group = #{group}
            and
            code = #{code}
        </where>
    </update>

    <update id="updateStatusByGroup">
        update delayed_job
        set status = #{status}
        <where>
            group = #{group}
        </where>
    </update>

    <update id="updateStatusByIds">
        update delayed_job
        set status = #{status}
        <where>
            1 = 1
            and
            <if test="ids != null and ids.size > 0">
                <foreach collection="ids" item="id" open="id in (" close=")" separator=",">
                    #{id}
                </foreach>
            </if>
        </where>
    </update>
</mapper>
